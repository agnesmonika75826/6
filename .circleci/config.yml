# Build file for CD demo
#
# No real need for layer caching, this will be really quick to build

# Some useful repeated stanzas

docker-sign-in: &docker-sign-in
  name: Sign into Docker registry
  command: |
    docker login -u halfercode -p ${GITLAB_CDDEMO_REGISTRY_TOKEN} registry.gitlab.com

only-deploy-tags: &only-deploy-tags
  filters:
    tags:
      only: /^deploy-.*/
    branches:
      ignore: /.*/

# Here are the jobs

version: 2
jobs:
  build:
    working_directory: /app
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      # This gets the local Docker service started
      - setup_remote_docker
      - run: *docker-sign-in
      - run:
          name: Build application Docker image
          command: |
            docker build \
                --tag ${CIRCLE_PROJECT_REPONAME} \
                .
      - run:
          name: Install test software
          command: |
            apk update
            apk --update add php7 openssl
            # Composer requirements
            apk --update add php7-openssl php7-json php7-mbstring php7-zlib php7-phar
            # PHPUnit requirements
            apk --update add php7-dom php7-mbstring
            # Give the PHP binary a nice name
            ln -s /usr/bin/php7 /usr/bin/php
            cd /app && sh /app/install/composer.sh
            php /app/composer.phar install
      - run:
          name: Start Docker container
          command: |
            docker run \
                --detach \
                --name ${CIRCLE_PROJECT_REPONAME} \
                ${CIRCLE_PROJECT_REPONAME}
            docker ps
      - run:
          # Thanks to https://unix.stackexchange.com/a/5279. CircleCI's Docker
          # system does not allow external connections in a DinD set-up, so I am
          # reaching into the container to do that.
          name: Wait for container to be ready
          command: |
            docker exec -it ${CIRCLE_PROJECT_REPONAME} /app/bin/wait.sh
      - run:
          name: Run tests
          command: |
            /app/vendor/bin/phpunit
      - run:
          name: Stop Docker container
          command: |
            docker stop ${CIRCLE_PROJECT_REPONAME}
      - run:
          name: Push Docker image if a deploy tag is detected
          command: |
            case $CIRCLE_TAG in
                deploy*)
                    docker tag ${CIRCLE_PROJECT_REPONAME} registry.gitlab.com/halfercode/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_TAG}
                    docker push registry.gitlab.com/halfercode/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_TAG}
                    ;;
                *)
                    echo "No deploy tag, so no need to push"
                    ;;
            esac

  # @todo This doesn't do any deploying yet, process needs designing and finishing
  # See the technique here: https://dzone.com/articles/deploying-from-circleci-to-linode-and-other-vps-pr
  deploy:
    working_directory: /app
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      # Adds the keys from the UI so we can access a remote service
      - add_ssh_keys
      # This gets the local Docker service started
      - setup_remote_docker
      - run:
          name: Pull Docker image onto deploy box
          command: |
            ssh-keyscan -H agnes.jondh.me.uk >> /root/.ssh/known_hosts
            # Not working yet, need to investigate with a post-fail SSH build
            #ssh root@agnes.jondh.me.uk ls /
            # This needs to be done with SSH
            #docker pull registry.gitlab.com/halfercode/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_TAG}

workflows:
  version: 2
  # This runs on non-tag pushes
  untagged-build:
    jobs:
      - build
  # This only runs on deploy tags and not branches
  tagged-build:
    jobs:
      - build: *only-deploy-tags
      - deploy:
          <<: *only-deploy-tags
          requires:
            - build
